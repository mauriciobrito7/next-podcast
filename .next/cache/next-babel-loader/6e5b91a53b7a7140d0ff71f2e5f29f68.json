{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Mauricio\\\\Documents\\\\Github\\\\myFirstNextApp\\\\pages\\\\channel.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nvar _default = /*#__PURE__*/function (_React$Component) {\n  _inherits(_default, _React$Component);\n\n  function _default() {\n    _classCallCheck(this, _default);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(_default).apply(this, arguments));\n  }\n\n  _createClass(_default, [{\n    key: \"render\",\n    value: function render() {\n      var channel = this.props.channel;\n      return __jsx(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17\n        },\n        __self: this\n      }, channel.title);\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(_ref) {\n      var id, reqChannel, dataChannel, channel, reqAudio, dataAudios, audioClips;\n      return _regeneratorRuntime.async(function getInitialProps$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              id = _ref.query.id;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(fetch(\"https://api.audioboom.com/channels/\".concat(id)));\n\n            case 3:\n              reqChannel = _context.sent;\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(reqChannel.json());\n\n            case 6:\n              dataChannel = _context.sent;\n              channel = dataChannel.body.channel;\n              _context.next = 10;\n              return _regeneratorRuntime.awrap(fetch(\"https://api.audioboom.com/channels/\".concat(id, \"/audio_clips\")));\n\n            case 10:\n              reqAudio = _context.sent;\n              _context.next = 13;\n              return _regeneratorRuntime.awrap(reqAudio.json());\n\n            case 13:\n              dataAudios = _context.sent;\n              audioClips = dataAudios.body.audio_clips;\n              return _context.abrupt(\"return\", {\n                channel: channel,\n                audioClips: audioClips\n              });\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }]);\n\n  return _default;\n}(React.Component);\n\nexport { _default as default };","map":{"version":3,"sources":["C:/Users/Mauricio/Documents/Github/myFirstNextApp/pages/channel.jsx"],"names":["channel","props","title","id","query","fetch","reqChannel","json","dataChannel","body","reqAudio","dataAudios","audioClips","audio_clips","React","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;6BAcW;AAAA,UACCA,OADD,GACa,KAAKC,KADlB,CACCD,OADD;AAEP,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKA,OAAO,CAACE,KAAb,CAAP;AACD;;;;;;;;;AAhBuCC,cAAAA,E,QAATC,K,CAASD,E;;+CACfE,KAAK,8CAAuCF,EAAvC,E;;;AAAxBG,cAAAA,U;;+CACoBA,UAAU,CAACC,IAAX,E;;;AAApBC,cAAAA,W;AACAR,cAAAA,O,GAAUQ,WAAW,CAACC,IAAZ,CAAiBT,O;;+CAEVK,KAAK,8CACcF,EADd,kB;;;AAAtBO,cAAAA,Q;;+CAGmBA,QAAQ,CAACH,IAAT,E;;;AAAnBI,cAAAA,U;AACAC,cAAAA,U,GAAaD,UAAU,CAACF,IAAX,CAAgBI,W;+CAE1B;AAAEb,gBAAAA,OAAO,EAAPA,OAAF;AAAWY,gBAAAA,UAAU,EAAVA;AAAX,e;;;;;;;;;;;;EAZkBE,KAAK,CAACC,S","sourcesContent":["export default class extends React.Component {\r\n  static async getInitialProps({ query: { id } }) {\r\n    let reqChannel = await fetch(`https://api.audioboom.com/channels/${id}`);\r\n    let dataChannel = await reqChannel.json();\r\n    let channel = dataChannel.body.channel;\r\n\r\n    let reqAudio = await fetch(\r\n      `https://api.audioboom.com/channels/${id}/audio_clips`\r\n    );\r\n    let dataAudios = await reqAudio.json();\r\n    let audioClips = dataAudios.body.audio_clips;\r\n\r\n    return { channel, audioClips };\r\n  }\r\n  render() {\r\n    const { channel } = this.props;\r\n    return <h1>{channel.title}</h1>;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}